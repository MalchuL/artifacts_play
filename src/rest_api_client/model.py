# generated by datamodel-codegen:
#   filename:  openapi_schema.json
#   timestamp: 2024-08-13T20:46:09+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional, Union

from pydantic import BaseModel, EmailStr, Field, conint, constr


class AddAccountSchema(BaseModel):
    username: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=6, max_length=32) = Field(
        ..., description='Your desired username.', title='Username'
    )
    password: constr(pattern=r'^[^\s]+$', min_length=5, max_length=50) = Field(
        ..., description='Your password.', title='Password'
    )
    email: EmailStr = Field(..., description='Your email.', title='Email')


class Skin(Enum):
    men1 = 'men1'
    men2 = 'men2'
    men3 = 'men3'
    women1 = 'women1'
    women2 = 'women2'
    women3 = 'women3'


class AddCharacterSchema(BaseModel):
    name: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=3, max_length=12) = Field(
        ...,
        description="Your desired character name. It's unique and all players can see it.",
        title='Name',
    )
    skin: Skin = Field(..., description='Your desired skin.', title='Skin')


class AnnouncementSchema(BaseModel):
    message: str = Field(..., description='Announcement text.', title='Message')
    created_at: Optional[datetime] = Field(
        None, description='Datetime of the announcement.', title='Created At'
    )


class BlockedHitsSchema(BaseModel):
    fire: int = Field(..., description='The amount of fire hits blocked.', title='Fire')
    earth: int = Field(
        ..., description='The amount of earth hits blocked.', title='Earth'
    )
    water: int = Field(
        ..., description='The amount of water hits blocked.', title='Water'
    )
    air: int = Field(..., description='The amount of air hits blocked.', title='Air')
    total: int = Field(
        ..., description='The amount of total hits blocked.', title='Total'
    )


class ChangePassword(BaseModel):
    password: constr(pattern=r'^[^\s]+$', min_length=5, max_length=50) = Field(
        ..., description='Your password.', title='Password'
    )


class Reason(Enum):
    movement = 'movement'
    fight = 'fight'
    crafting = 'crafting'
    gathering = 'gathering'
    buy_ge = 'buy_ge'
    sell_ge = 'sell_ge'
    delete_item = 'delete_item'
    deposit_bank = 'deposit_bank'
    withdraw_bank = 'withdraw_bank'
    equip = 'equip'
    unequip = 'unequip'
    task = 'task'
    recycling = 'recycling'


class CooldownSchema(BaseModel):
    total_seconds: int = Field(
        ..., description='The total seconds of the cooldown.', title='Total Seconds'
    )
    remaining_seconds: int = Field(
        ...,
        description='The remaining seconds of the cooldown.',
        title='Remaining Seconds',
    )
    started_at: datetime = Field(
        ..., description='The start of the cooldown.', title='Started At'
    )
    expiration: datetime = Field(
        ..., description='The expiration of the cooldown.', title='Expiration'
    )
    reason: Reason = Field(
        ..., description='The reason of the cooldown.', title='Reason'
    )


class Skill(Enum):
    weaponcrafting = 'weaponcrafting'
    gearcrafting = 'gearcrafting'
    jewelrycrafting = 'jewelrycrafting'
    cooking = 'cooking'
    woodcutting = 'woodcutting'
    mining = 'mining'


class CraftingSchema(BaseModel):
    code: constr(pattern=r'^[a-zA-Z0-9_-]+$') = Field(
        ..., description='Craft code.', title='Craft code'
    )
    quantity: Optional[conint(ge=1)] = Field(
        1, description='Quantity of items to craft.', title='Quantity'
    )


class DeleteCharacterSchema(BaseModel):
    name: constr(pattern=r'^[a-zA-Z0-9_-]+$', min_length=3, max_length=12) = Field(
        ..., description='Character name.', title='Name'
    )


class DepositWithdrawGoldSchema(BaseModel):
    quantity: conint(ge=1) = Field(
        ..., description='Quantity of gold.', title='Quantity'
    )


class DestinationSchema(BaseModel):
    x: int = Field(..., description='The x coordinate of the destination.', title='X')
    y: int = Field(..., description='The y coordinate of the destination.', title='Y')


class DropRateSchema(BaseModel):
    code: constr(pattern=r'^[a-zA-Z0-9_-]+$') = Field(
        ..., description='Item code.', title='Item code'
    )
    rate: conint(ge=1) = Field(..., description='Chance rate.', title='Rate')
    min_quantity: conint(ge=1) = Field(
        ..., description='Minimum quantity.', title='Min Quantity'
    )
    max_quantity: conint(ge=1) = Field(
        ..., description='Maximum quantity.', title='Max Quantity'
    )


class DropSchema(BaseModel):
    code: str = Field(..., description='The code of the item.', title='Code')
    quantity: int = Field(
        ..., description='The quantity of the item.', title='Quantity'
    )


class Slot(Enum):
    weapon = 'weapon'
    shield = 'shield'
    helmet = 'helmet'
    body_armor = 'body_armor'
    leg_armor = 'leg_armor'
    boots = 'boots'
    ring1 = 'ring1'
    ring2 = 'ring2'
    amulet = 'amulet'
    artifact1 = 'artifact1'
    artifact2 = 'artifact2'
    artifact3 = 'artifact3'
    consumable1 = 'consumable1'
    consumable2 = 'consumable2'


class EquipSchema(BaseModel):
    code: constr(pattern=r'^[a-zA-Z0-9_-]+$') = Field(
        ..., description='Item code.', title='Code'
    )
    slot: Slot = Field(..., description='Item slot.', title='Slot')


class Result(Enum):
    win = 'win'
    lose = 'lose'


class FightSchema(BaseModel):
    xp: int = Field(
        ..., description='The amount of xp gained by the fight.', title='Xp'
    )
    gold: int = Field(
        ..., description='The amount of gold gained by the fight.', title='Gold'
    )
    drops: List[DropSchema] = Field(
        ..., description='The items dropped by the fight.', title='Drops'
    )
    turns: int = Field(
        ..., description='Numbers of the turns of the combat.', title='Turns'
    )
    monster_blocked_hits: BlockedHitsSchema = Field(
        ..., description='The amount of blocked hits by the monster.'
    )
    player_blocked_hits: BlockedHitsSchema = Field(
        ..., description='The amount of blocked hits by the player.'
    )
    logs: List[str] = Field(..., description='The fight logs.', title='Logs')
    result: Result = Field(..., description='The result of the fight.', title='Result')


class GEItemSchema(BaseModel):
    code: str = Field(..., description='Item code.', title='Code')
    stock: int = Field(..., description='Item stock.', title='Stock')
    sell_price: Optional[int] = Field(
        None, description="The item's selling price.", title='Sell Price'
    )
    buy_price: Optional[int] = Field(
        None, description="The item's buying price.", title='Buy Price'
    )


class GETransactionItemSchema(BaseModel):
    code: constr(pattern=r'^[a-zA-Z0-9_-]+$') = Field(
        ..., description='Item code.', title='Code'
    )
    quantity: conint(ge=1, le=50) = Field(
        ..., description='Item quantity.', title='Quantity'
    )
    price: conint(ge=1) = Field(
        ...,
        description='Item price. Item price validation protects you if the price has changed since you last checked the buy/sale price of an item.',
        title='Price',
    )


class GETransactionSchema(BaseModel):
    code: str = Field(..., description='Item code.', title='Code')
    quantity: int = Field(..., description='Item quantity.', title='Quantity')
    price: int = Field(..., description='Item price.', title='Price')
    total_price: int = Field(
        ..., description='Total price of the transaction.', title='Total Price'
    )


class GoldSchema(BaseModel):
    quantity: conint(ge=0) = Field(
        ..., description='Quantity of gold.', title='Quantity'
    )


class InventorySlot(BaseModel):
    slot: int = Field(..., description='Inventory slot identifier.', title='Slot')
    code: str = Field(..., description='Item code.', title='Code')
    quantity: int = Field(..., description='Quantity in the slot.', title='Quantity')


class ItemEffectSchema(BaseModel):
    name: str = Field(..., description='Effect name.', title='Name')
    value: int = Field(..., description='Effect value.', title='Value')


class LogSchema(BaseModel):
    character: str = Field(..., description='Character name.', title='Character')
    account: str = Field(..., description='Account character.', title='Account')
    type: str = Field(..., description='Type of action.', title='Type')
    description: str = Field(
        ..., description='Description of action.', title='Description'
    )
    content: Any = Field(..., description='Content of action.', title='Content')
    cooldown: int = Field(..., description='Cooldown in seconds.', title='Cooldown')
    cooldown_expiration: datetime = Field(
        ..., description='Datetime of cooldown expiration.', title='Cooldown Expiration'
    )
    created_at: datetime = Field(
        ..., description='Datetime of creation.', title='Created At'
    )


class MapContentSchema(BaseModel):
    type: str = Field(..., description='Type of the content.', title='Type')
    code: str = Field(..., description='Code of the content.', title='Code')


class MapSchema(BaseModel):
    name: str = Field(..., description='Name of the map.', title='Name')
    skin: str = Field(..., description='Skin of the map.', title='Skin')
    x: int = Field(..., description='Position X of the map.', title='X')
    y: int = Field(..., description='Position Y of the map.', title='Y')
    content: Optional[MapContentSchema] = Field(..., description='Content of the map.')


class MonsterSchema(BaseModel):
    name: str = Field(..., description='Name of the monster.', title='Name')
    code: str = Field(
        ...,
        description="The code of the monster. This is the monster's unique identifier (ID).",
        title='Code',
    )
    level: int = Field(..., description='Monster level.', title='Level')
    hp: int = Field(..., description='Monster hit points.', title='Hp')
    attack_fire: int = Field(
        ..., description='Monster fire attack.', title='Attack Fire'
    )
    attack_earth: int = Field(
        ..., description='Monster earth attack.', title='Attack Earth'
    )
    attack_water: int = Field(
        ..., description='Monster water attack.', title='Attack Water'
    )
    attack_air: int = Field(..., description='Monster air attack.', title='Attack Air')
    res_fire: int = Field(
        ..., description='Monster % fire resistance.', title='Res Fire'
    )
    res_earth: int = Field(
        ..., description='Monster % earth resistance.', title='Res Earth'
    )
    res_water: int = Field(
        ..., description='Monster % water resistance.', title='Res Water'
    )
    res_air: int = Field(..., description='Monster % air resistance.', title='Res Air')
    min_gold: int = Field(
        ..., description='Monster minimum gold drop. ', title='Min Gold'
    )
    max_gold: int = Field(
        ..., description='Monster maximum gold drop. ', title='Max Gold'
    )
    drops: List[DropRateSchema] = Field(
        ...,
        description='Monster drops. This is a list of items that the monster drops after killing the monster. ',
        title='Drops',
    )


class RecyclingItemsSchema(BaseModel):
    items: List[DropSchema] = Field(..., description='Objects received.', title='Items')


class RecyclingSchema(BaseModel):
    code: constr(pattern=r'^[a-zA-Z0-9_-]+$') = Field(
        ..., description='Item code.', title='Item code'
    )
    quantity: Optional[conint(ge=1)] = Field(
        1, description='Quantity of items to recycle.', title='Quantity'
    )


class Skill1(Enum):
    mining = 'mining'
    woodcutting = 'woodcutting'
    fishing = 'fishing'


class ResourceSchema(BaseModel):
    name: str = Field(..., description='The name of the resource', title='Name')
    code: str = Field(
        ...,
        description="The code of the resource. This is the resource's unique identifier (ID).",
        title='Code',
    )
    skill: Skill1 = Field(
        ...,
        description='The skill required to gather this resource.',
        title='Skill code',
    )
    level: int = Field(
        ...,
        description='The skill level required to gather this resource.',
        title='Level',
    )
    drops: List[DropRateSchema] = Field(
        ..., description='The drops of this resource.', title='Drops'
    )


class ResponseSchema(BaseModel):
    message: str = Field(..., title='Message')


class SimpleItemSchema(BaseModel):
    code: constr(pattern=r'^[a-zA-Z0-9_-]+$') = Field(
        ..., description='Item code.', title='Code'
    )
    quantity: conint(ge=1) = Field(..., description='Item quantity.', title='Quantity')


class SkillInfoSchema(BaseModel):
    xp: int = Field(..., description='The amount of xp gained.', title='Xp')
    items: List[DropSchema] = Field(..., description='Objects received.', title='Items')


class StatusSchema(BaseModel):
    status: str = Field(..., description='Server status', title='Status')
    version: Optional[str] = Field(None, title='Version')
    characters_online: Optional[int] = Field(None, title='Characters Online')
    server_time: Optional[datetime] = Field(None, title='Server Time')
    announcements: Optional[List[AnnouncementSchema]] = Field(
        None, title='Announcements'
    )
    last_wipe: str = Field(..., description='Last server wipe.', title='Last Wipe')
    next_wipe: str = Field(..., description='Next server wipe.', title='Next Wipe')


class TaskRewardSchema(BaseModel):
    code: str = Field(..., description='Item code.', title='Code')
    quantity: int = Field(..., description='Item quantity.', title='Quantity')


class Type(Enum):
    monsters = 'monsters'
    resources = 'resources'
    crafts = 'crafts'


class TaskSchema(BaseModel):
    code: str = Field(..., description='Task objective.', title='Code')
    type: Type = Field(..., description='The type of task.', title='Type')
    total: int = Field(
        ..., description='The total required to complete the task.', title='Total'
    )


class TokenResponseSchema(BaseModel):
    token: str = Field(..., title='Token')


class UnequipSchema(BaseModel):
    slot: Slot = Field(..., description='Item slot.', title='Slot')


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title='Location')
    msg: str = Field(..., title='Message')
    type: str = Field(..., title='Error Type')


class ActiveEventSchema(BaseModel):
    name: str = Field(..., description='Name of the event.', title='Name')
    map: MapSchema = Field(..., description='Map of the event.')
    previous_skin: str = Field(
        ..., description='Previous map skin.', title='Previous Skin'
    )
    duration: int = Field(..., description='Duration in minutes.', title='Duration')
    expiration: datetime = Field(
        ..., description='Expiration datetime.', title='Expiration'
    )
    created_at: datetime = Field(..., description='Start datetime.', title='Created At')


class CharacterSchema(BaseModel):
    name: str = Field(..., description='Name of the character.', title='Name')
    skin: Skin = Field(..., description='Character skin code.', title='Skin')
    level: int = Field(..., description='Combat level.', title='Level')
    xp: int = Field(
        ..., description='The current xp level of the combat level.', title='Xp'
    )
    max_xp: int = Field(
        ..., description='XP required to level up the character.', title='Max Xp'
    )
    total_xp: int = Field(
        ..., description='Total XP of your character.', title='Total Xp'
    )
    gold: int = Field(
        ..., description='The numbers of golds on this character.', title='Gold'
    )
    speed: int = Field(
        ...,
        description='*Not available, on the roadmap. Character movement speed.',
        title='Speed',
    )
    mining_level: int = Field(..., description='Mining level.', title='Mining Level')
    mining_xp: int = Field(
        ..., description='The current xp level of the Mining skill.', title='Mining Xp'
    )
    mining_max_xp: int = Field(
        ...,
        description='Mining XP required to level up the skill.',
        title='Mining Max Xp',
    )
    woodcutting_level: int = Field(
        ..., description='Woodcutting level.', title='Woodcutting Level'
    )
    woodcutting_xp: int = Field(
        ...,
        description='The current xp level of the Woodcutting skill.',
        title='Woodcutting Xp',
    )
    woodcutting_max_xp: int = Field(
        ...,
        description='Woodcutting XP required to level up the skill.',
        title='Woodcutting Max Xp',
    )
    fishing_level: int = Field(..., description='Fishing level.', title='Fishing Level')
    fishing_xp: int = Field(
        ...,
        description='The current xp level of the Fishing skill.',
        title='Fishing Xp',
    )
    fishing_max_xp: int = Field(
        ...,
        description='Fishing XP required to level up the skill.',
        title='Fishing Max Xp',
    )
    weaponcrafting_level: int = Field(
        ..., description='Weaponcrafting level.', title='Weaponcrafting Level'
    )
    weaponcrafting_xp: int = Field(
        ...,
        description='The current xp level of the Weaponcrafting skill.',
        title='Weaponcrafting Xp',
    )
    weaponcrafting_max_xp: int = Field(
        ...,
        description='Weaponcrafting XP required to level up the skill.',
        title='Weaponcrafting Max Xp',
    )
    gearcrafting_level: int = Field(
        ..., description='Gearcrafting level.', title='Gearcrafting Level'
    )
    gearcrafting_xp: int = Field(
        ...,
        description='The current xp level of the Gearcrafting skill.',
        title='Gearcrafting Xp',
    )
    gearcrafting_max_xp: int = Field(
        ...,
        description='Gearcrafting XP required to level up the skill.',
        title='Gearcrafting Max Xp',
    )
    jewelrycrafting_level: int = Field(
        ..., description='Jewelrycrafting level.', title='Jewelrycrafting Level'
    )
    jewelrycrafting_xp: int = Field(
        ...,
        description='The current xp level of the Jewelrycrafting skill.',
        title='Jewelrycrafting Xp',
    )
    jewelrycrafting_max_xp: int = Field(
        ...,
        description='Jewelrycrafting XP required to level up the skill.',
        title='Jewelrycrafting Max Xp',
    )
    cooking_level: int = Field(
        ...,
        description='The current xp level of the Cooking skill.',
        title='Cooking Level',
    )
    cooking_xp: int = Field(..., description='Cooking XP.', title='Cooking Xp')
    cooking_max_xp: int = Field(
        ...,
        description='Cooking XP required to level up the skill.',
        title='Cooking Max Xp',
    )
    hp: int = Field(..., description='Character HP.', title='Hp')
    haste: int = Field(
        ...,
        description='*Character Haste. Increase speed attack (reduce fight cooldown)',
        title='Haste',
    )
    critical_strike: int = Field(
        ...,
        description="*Not available, on the roadmap. Character Critical   Strike. Critical strikes increase the attack's damage.",
        title='Critical Strike',
    )
    stamina: int = Field(
        ...,
        description='*Not available, on the roadmap. Regenerates life at the start of each turn.',
        title='Stamina',
    )
    attack_fire: int = Field(..., description='Fire attack.', title='Attack Fire')
    attack_earth: int = Field(..., description='Earth attack.', title='Attack Earth')
    attack_water: int = Field(..., description='Water attack.', title='Attack Water')
    attack_air: int = Field(..., description='Air attack.', title='Attack Air')
    dmg_fire: int = Field(..., description='% Fire damage.', title='Dmg Fire')
    dmg_earth: int = Field(..., description='% Earth damage.', title='Dmg Earth')
    dmg_water: int = Field(..., description='% Water damage.', title='Dmg Water')
    dmg_air: int = Field(..., description='% Air damage.', title='Dmg Air')
    res_fire: int = Field(..., description='% Fire resistance.', title='Res Fire')
    res_earth: int = Field(..., description='% Earth resistance.', title='Res Earth')
    res_water: int = Field(..., description='% Water resistance.', title='Res Water')
    res_air: int = Field(..., description='% Air resistance.', title='Res Air')
    x: int = Field(..., description='Character x coordinate.', title='X')
    y: int = Field(..., description='Character y coordinate.', title='Y')
    cooldown: int = Field(..., description='Cooldown in seconds.', title='Cooldown')
    cooldown_expiration: Optional[datetime] = Field(
        None, description='Datetime Cooldown expiration.', title='Cooldown Expiration'
    )
    weapon_slot: str = Field(..., description='Weapon slot.', title='Weapon Slot')
    shield_slot: str = Field(..., description='Shield slot.', title='Shield Slot')
    helmet_slot: str = Field(..., description='Helmet slot.', title='Helmet Slot')
    body_armor_slot: str = Field(
        ..., description='Body armor slot.', title='Body Armor Slot'
    )
    leg_armor_slot: str = Field(
        ..., description='Leg armor slot.', title='Leg Armor Slot'
    )
    boots_slot: str = Field(..., description='Boots slot.', title='Boots Slot')
    ring1_slot: str = Field(..., description='Ring 1 slot.', title='Ring1 Slot')
    ring2_slot: str = Field(..., description='Ring 2 slot.', title='Ring2 Slot')
    amulet_slot: str = Field(..., description='Amulet slot.', title='Amulet Slot')
    artifact1_slot: str = Field(
        ..., description='Artifact 1 slot.', title='Artifact1 Slot'
    )
    artifact2_slot: str = Field(
        ..., description='Artifact 2 slot.', title='Artifact2 Slot'
    )
    artifact3_slot: str = Field(
        ..., description='Artifact 3 slot.', title='Artifact3 Slot'
    )
    consumable1_slot: str = Field(
        ..., description='Consumable 1 slot.', title='Consumable1 Slot'
    )
    consumable1_slot_quantity: int = Field(
        ..., description='Consumable 1 quantity.', title='Consumable1 Slot Quantity'
    )
    consumable2_slot: str = Field(
        ..., description='Consumable 2 slot.', title='Consumable2 Slot'
    )
    consumable2_slot_quantity: int = Field(
        ..., description='Consumable 2 quantity.', title='Consumable2 Slot Quantity'
    )
    task: str = Field(..., description='Task in progress.', title='Task')
    task_type: str = Field(..., description='Task type.', title='Task Type')
    task_progress: int = Field(
        ..., description='Task progression.', title='Task Progress'
    )
    task_total: int = Field(
        ..., description='Task total objective.', title='Task Total'
    )
    inventory_max_items: int = Field(
        ..., description='Inventory max items.', title='Inventory Max Items'
    )
    inventory: Optional[List[InventorySlot]] = Field(
        None, description='List of inventory slots.', title='Inventory'
    )


class CraftSchema(BaseModel):
    skill: Optional[Skill] = Field(
        None, description='Skill required to craft the item.', title='Skill code'
    )
    level: Optional[int] = Field(
        None, description='The skill level required to craft the item.', title='Level'
    )
    items: Optional[List[SimpleItemSchema]] = Field(
        None, description='List of items required to craft the item.', title='Items'
    )
    quantity: Optional[int] = Field(
        None, description='Quantity of items crafted.', title='Quantity'
    )


class DataPageActiveEventSchema(BaseModel):
    data: List[ActiveEventSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageCharacterSchema(BaseModel):
    data: List[CharacterSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageGEItemSchema(BaseModel):
    data: List[GEItemSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageLogSchema(BaseModel):
    data: List[LogSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageMapSchema(BaseModel):
    data: List[MapSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageMonsterSchema(BaseModel):
    data: List[MonsterSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageResourceSchema(BaseModel):
    data: List[ResourceSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DataPageSimpleItemSchema(BaseModel):
    data: List[SimpleItemSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DeleteItemSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    item: SimpleItemSchema = Field(..., description='Item details.')
    character: CharacterSchema = Field(..., description='Player details.')


class GEItemResponseSchema(BaseModel):
    data: GEItemSchema


class GETransactionListSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    transaction: GETransactionSchema = Field(..., description='Transaction details.')
    character: CharacterSchema = Field(..., description='Character details.')


class GETransactionResponseSchema(BaseModel):
    data: GETransactionListSchema


class GoldBankResponseSchema(BaseModel):
    data: GoldSchema


class GoldTransactionSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    bank: GoldSchema = Field(..., description='Bank details.')
    character: CharacterSchema = Field(..., description='Player details.')


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title='Detail')


class ItemSchema(BaseModel):
    name: str = Field(..., description='Item name.', title='Name')
    code: str = Field(
        ...,
        description="Item code. This is the item's unique identifier (ID).",
        title='Code',
    )
    level: conint(ge=1) = Field(..., description='Item level.', title='Level')
    type: str = Field(..., description='Item type.', title='Type')
    subtype: str = Field(..., description='Item subtype.', title='Subtype')
    description: str = Field(..., description='Item description.', title='Description')
    effects: Optional[List[ItemEffectSchema]] = Field(
        None,
        description='List of object effects. For equipment, it will include item stats.',
        title='Effects',
    )
    craft: Optional[CraftSchema] = Field(
        None, description='Craft information. If applicable.'
    )


class MapResponseSchema(BaseModel):
    data: MapSchema


class MonsterResponseSchema(BaseModel):
    data: MonsterSchema


class MyCharactersListSchema(BaseModel):
    data: List[CharacterSchema] = Field(
        ..., description='List of your characters.', title='Data'
    )


class RecyclingDataSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    details: RecyclingItemsSchema = Field(..., description='Craft details.')
    character: CharacterSchema = Field(..., description='Player details.')


class RecyclingResponseSchema(BaseModel):
    data: RecyclingDataSchema


class ResourceResponseSchema(BaseModel):
    data: ResourceSchema


class SingleItemSchema(BaseModel):
    item: ItemSchema = Field(..., description='Item information.')
    ge: Optional[GEItemSchema] = Field(
        None, description='Grand Exchange information. If applicable.'
    )


class SkillDataSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    details: SkillInfoSchema = Field(..., description='Craft details.')
    character: CharacterSchema = Field(..., description='Player details.')


class SkillResponseSchema(BaseModel):
    data: SkillDataSchema


class StatusResponseSchema(BaseModel):
    data: StatusSchema


class TaskDataSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    task: TaskSchema = Field(..., description='Task details.')
    character: CharacterSchema = Field(..., description='Player details.')


class TaskResponseSchema(BaseModel):
    data: TaskDataSchema


class TaskRewardDataSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    reward: TaskRewardSchema = Field(..., description='Reward details.')
    character: CharacterSchema = Field(..., description='Player details.')


class TaskRewardResponseSchema(BaseModel):
    data: TaskRewardDataSchema


class BankItemSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    item: ItemSchema = Field(..., description='Item details.')
    bank: List[SimpleItemSchema] = Field(
        ..., description='Items in your banks.', title='Bank'
    )
    character: CharacterSchema = Field(..., description='Player details.')


class CharacterFightDataSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    fight: FightSchema = Field(..., description='Fight details.')
    character: CharacterSchema = Field(..., description='Player details.')


class CharacterFightResponseSchema(BaseModel):
    data: CharacterFightDataSchema


class CharacterMovementDataSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details')
    destination: MapSchema = Field(..., description='Destination details.')
    character: CharacterSchema = Field(..., description='Character details.')


class CharacterMovementResponseSchema(BaseModel):
    data: CharacterMovementDataSchema


class CharacterResponseSchema(BaseModel):
    data: CharacterSchema


class DataPageItemSchema(BaseModel):
    data: List[ItemSchema] = Field(..., title='Data')
    total: Optional[conint(ge=0)] = Field(..., title='Total')
    page: Optional[conint(ge=1)] = Field(..., title='Page')
    size: Optional[conint(ge=1)] = Field(..., title='Size')
    pages: Optional[conint(ge=0)] = Field(None, title='Pages')


class DeleteItemResponseSchema(BaseModel):
    data: DeleteItemSchema


class EquipRequestSchema(BaseModel):
    cooldown: CooldownSchema = Field(..., description='Cooldown details.')
    slot: Slot = Field(..., description='Item slot.', title='Slot')
    item: ItemSchema = Field(..., description='Item details.')
    character: CharacterSchema = Field(..., description='Player details.')


class EquipmentResponseSchema(BaseModel):
    data: EquipRequestSchema


class GoldResponseSchema(BaseModel):
    data: GoldTransactionSchema


class ItemResponseSchema(BaseModel):
    data: SingleItemSchema


class ActionItemBankResponseSchema(BaseModel):
    data: BankItemSchema
